"""
Combat handlers for Telegram bot commands and callbacks.
"""

import logging
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import get_db_session, get_hero_by_user_id, get_hero_class_by_id, get_monster_by_id, get_monster_class_by_id, update_hero, add_hero_experience
from hero_system import HeroCalculator
from monster_system import MonsterCalculator
from combat_system import combat_engine, CombatAction, CombatResult
from keyboards import get_combat_keyboard, get_main_menu_keyboard

logger = logging.getLogger(__name__)

router = Router()


class CombatStates(StatesGroup):
    """States for combat flow."""
    IN_COMBAT = State()
    CHOOSING_ACTION = State()


@router.message(Command("fight"))
async def start_fight_command(message: Message, state: FSMContext):
    """Start a fight with a random monster."""
    user_id = message.from_user.id
    
    # Check if user is already in combat
    if combat_engine.get_combat_state(user_id):
        await message.answer("‚öîÔ∏è –í–∏ –≤–∂–µ –≤ –±–æ—é! –ó–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –±—ñ–π –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –Ω–æ–≤–æ–≥–æ.")
        return
    
    async for session in get_db_session():
        # Get user's hero
        hero = await get_hero_by_user_id(session, user_id)
        if not hero:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –≥–µ—Ä–æ—è! –°—Ç–≤–æ—Ä—ñ—Ç—å –≥–µ—Ä–æ—è –∫–æ–º–∞–Ω–¥–æ—é /create_hero")
            return
        
        # Get hero class
        hero_class = await get_hero_class_by_id(session, hero.hero_class_id)
        if not hero_class:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–ª–∞—Å –≥–µ—Ä–æ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        # Get a random monster (for now, we'll create a simple one)
        # In a real implementation, you'd have a monster spawning system
        from init_monsters import create_sample_monster
        monster = await create_sample_monster(session)
        monster_class = await get_monster_class_by_id(session, monster.monster_class_id)
        
        if not monster_class:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–ª–∞—Å –º–æ–Ω—Å—Ç—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        # Start combat
        combat_state = combat_engine.start_combat(user_id, hero, hero_class, monster, monster_class)
        
        # Set state
        await state.set_state(CombatStates.IN_COMBAT)
        await state.update_data(monster_id=monster.id)
        
        # Send combat status
        status_text = combat_engine.format_combat_status(combat_state)
        await message.answer(
            status_text,
            reply_markup=get_combat_keyboard()
        )
        break


@router.callback_query(F.data.startswith("combat_"), StateFilter(CombatStates.IN_COMBAT))
async def handle_combat_action(callback: CallbackQuery, state: FSMContext):
    """Handle combat action callbacks."""
    user_id = callback.from_user.id
    action_data = callback.data.split("_")[1]
    
    # Check if user is still in combat
    combat_state = combat_engine.get_combat_state(user_id)
    if not combat_state:
        await callback.answer("‚ùå –ë—ñ–π –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        await state.clear()
        return
    
    # Map callback data to combat actions
    action_map = {
        "attack": CombatAction.ATTACK,
        "magic": CombatAction.MAGIC,
        "defend": CombatAction.DEFEND,
        "flee": CombatAction.FLEE
    }
    
    if action_data not in action_map:
        await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è!")
        return
    
    action = action_map[action_data]
    
    # Execute hero action
    hero_result = combat_engine.execute_hero_action(user_id, action)
    if not hero_result:
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó!")
        return
    
    # Add result to combat log
    combat_state.combat_log.append(hero_result.message)
    
    # Check if combat ended after hero action
    combat_result = combat_engine.check_combat_end(user_id)
    if combat_result == CombatResult.HERO_WIN:
        await handle_combat_victory(callback, state, combat_state)
        return
    elif combat_result == CombatResult.MONSTER_WIN:
        await handle_combat_defeat(callback, state, combat_state)
        return
    elif combat_result == CombatResult.HERO_FLEE:
        await handle_combat_flee(callback, state, combat_state)
        return
    
    # Execute monster action
    monster_result = combat_engine.execute_monster_action(user_id)
    if monster_result:
        combat_state.combat_log.append(monster_result.message)
    
    # Check if combat ended after monster action
    combat_result = combat_engine.check_combat_end(user_id)
    if combat_result == CombatResult.MONSTER_WIN:
        await handle_combat_defeat(callback, state, combat_state)
        return
    
    # Increment turn
    combat_state.turn += 1
    combat_state.hero_defending = False
    combat_state.monster_defending = False
    
    # Update combat status
    status_text = combat_engine.format_combat_status(combat_state)
    
    # Show last few combat log entries
    recent_log = combat_state.combat_log[-3:] if len(combat_state.combat_log) > 3 else combat_state.combat_log
    log_text = "\n".join(recent_log)
    
    full_text = f"{status_text}\n\nüìú <b>–û—Å—Ç–∞–Ω–Ω—ñ –¥—ñ—ó:</b>\n{log_text}"
    
    await callback.message.edit_text(
        full_text,
        reply_markup=get_combat_keyboard()
    )
    await callback.answer()


async def handle_combat_victory(callback: CallbackQuery, state: FSMContext, combat_state):
    """Handle combat victory."""
    user_id = callback.from_user.id
    
    # Calculate rewards
    rewards = combat_engine.get_combat_rewards(combat_state)
    
    # Update hero with rewards
    async for session in get_db_session():
        hero = await get_hero_by_user_id(session, user_id)
        if hero:
            # Add experience
            hero = await add_hero_experience(session, hero, rewards['experience'])
            
            # Update hero's current HP to reflect combat damage
            hero.current_hp = combat_state.hero_hp
            await update_hero(session, hero)
        break
    
    victory_text = f"""
üéâ <b>–ü–ï–†–ï–ú–û–ì–ê!</b>

–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏ {combat_state.monster_stats.monster_type if hasattr(combat_state.monster_stats, 'monster_type') else '–º–æ–Ω—Å—Ç—Ä–∞'}!

üèÜ <b>–ù–∞–≥–æ—Ä–æ–¥–∏:</b>
‚≠ê –î–æ—Å–≤—ñ–¥: +{rewards['experience']}
üí∞ –ó–æ–ª–æ—Ç–æ: +{rewards['gold']}

‚ù§Ô∏è HP –ø—ñ—Å–ª—è –±–æ—é: {combat_state.hero_hp}/{combat_state.hero_stats.hp_max}
"""
    
    await callback.message.edit_text(
        victory_text,
        reply_markup=get_main_menu_keyboard()
    )
    
    # Clear combat state
    combat_engine.end_combat(user_id)
    await state.clear()
    await callback.answer()


async def handle_combat_defeat(callback: CallbackQuery, state: FSMContext, combat_state):
    """Handle combat defeat."""
    user_id = callback.from_user.id
    
    # Update hero's HP to 1 (not dead, just defeated)
    async for session in get_db_session():
        hero = await get_hero_by_user_id(session, user_id)
        if hero:
            hero.current_hp = 1  # Leave hero with 1 HP
            await update_hero(session, hero)
        break
    
    defeat_text = f"""
üíÄ <b>–ü–û–†–ê–ó–ö–ê!</b>

–í–∏ –±—É–ª–∏ –ø–µ—Ä–µ–º–æ–∂–µ–Ω—ñ {combat_state.monster_stats.monster_type if hasattr(combat_state.monster_stats, 'monster_type') else '–º–æ–Ω—Å—Ç—Ä–æ–º'}!

üè• –í–∞—à –≥–µ—Ä–æ–π –≤—Ç—Ä–∞—Ç–∏–≤ —Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å —ñ –±—É–≤ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ –º—ñ—Å—Ç–∞.
‚ù§Ô∏è HP –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –¥–æ 1.

–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –∫–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ!
"""
    
    await callback.message.edit_text(
        defeat_text,
        reply_markup=get_main_menu_keyboard()
    )
    
    # Clear combat state
    combat_engine.end_combat(user_id)
    await state.clear()
    await callback.answer()


async def handle_combat_flee(callback: CallbackQuery, state: FSMContext, combat_state):
    """Handle successful flee from combat."""
    flee_text = f"""
üèÉ <b>–í–¢–ï–ß–ê!</b>

–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Ç–µ–∫–ª–∏ –∑ –±–æ—é!

‚ù§Ô∏è HP –ø—ñ—Å–ª—è –≤—Ç–µ—á—ñ: {combat_state.hero_hp}/{combat_state.hero_stats.hp_max}

–Ü–Ω–æ–¥—ñ —Ä–æ–∑—É–º–Ω—ñ—Å—Ç—å –≤–∞–∂–ª–∏–≤—ñ—à–∞ –∑–∞ —Ö–æ—Ä–æ–±—Ä—ñ—Å—Ç—å!
"""
    
    await callback.message.edit_text(
        flee_text,
        reply_markup=get_main_menu_keyboard()
    )
    
    # Clear combat state
    combat_engine.end_combat(callback.from_user.id)
    await state.clear()
    await callback.answer()


@router.message(Command("combat_status"))
async def combat_status_command(message: Message, state: FSMContext):
    """Check current combat status."""
    user_id = message.from_user.id
    
    combat_state = combat_engine.get_combat_state(user_id)
    if not combat_state:
        await message.answer("‚ùå –í–∏ –Ω–µ –≤ –±–æ—é –∑–∞—Ä–∞–∑.")
        return
    
    status_text = combat_engine.format_combat_status(combat_state)
    
    # Show recent combat log
    recent_log = combat_state.combat_log[-5:] if len(combat_state.combat_log) > 5 else combat_state.combat_log
    log_text = "\n".join(recent_log) if recent_log else "–ë—ñ–π —â–æ–π–Ω–æ –ø–æ—á–∞–≤—Å—è."
    
    full_text = f"{status_text}\n\nüìú <b>–Ü—Å—Ç–æ—Ä—ñ—è –±–æ—é:</b>\n{log_text}"
    
    await message.answer(
        full_text,
        reply_markup=get_combat_keyboard()
    )


@router.message(Command("end_combat"))
async def end_combat_command(message: Message, state: FSMContext):
    """Force end current combat."""
    user_id = message.from_user.id
    
    combat_state = combat_engine.get_combat_state(user_id)
    if not combat_state:
        await message.answer("‚ùå –í–∏ –Ω–µ –≤ –±–æ—é –∑–∞—Ä–∞–∑.")
        return
    
    # End combat
    combat_engine.end_combat(user_id)
    await state.clear()
    
    await message.answer(
        "‚öîÔ∏è –ë—ñ–π –ø—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(StateFilter(CombatStates.IN_COMBAT))
async def combat_state_handler(message: Message):
    """Handle messages while in combat state."""
    await message.answer(
        "‚öîÔ∏è –í–∏ –≤ –±–æ—é! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–π –∞–±–æ –∫–æ–º–∞–Ω–¥—É /end_combat –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–æ—é."
    )
